// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type tbEmp1ViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *tbEmp1ViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("tb_emp1").
func (v *tbEmp1ViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *tbEmp1ViewType) Columns() []string {
	return []string{
		"id",
		"name",
		"eptId",
		"salary",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *tbEmp1ViewType) NewStruct() reform.Struct {
	return new(TbEmp1)
}

// TbEmp1View represents tb_emp1 view or table in SQL database.
var TbEmp1View = &tbEmp1ViewType{
	s: parse.StructInfo{
		Type:    "TbEmp1",
		SQLName: "tb_emp1",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "*int32", Column: "id"},
			{Name: "Name", Type: "*string", Column: "name"},
			{Name: "EptId", Type: "*int32", Column: "eptId"},
			{Name: "Salary", Type: "*float32", Column: "salary"},
		},
		PKFieldIndex: -1,
	},
	z: new(TbEmp1).Values(),
}

// String returns a string representation of this struct or record.
func (s TbEmp1) String() string {
	res := make([]string, 4)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Name: " + reform.Inspect(s.Name, true)
	res[2] = "EptId: " + reform.Inspect(s.EptId, true)
	res[3] = "Salary: " + reform.Inspect(s.Salary, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *TbEmp1) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Name,
		s.EptId,
		s.Salary,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *TbEmp1) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Name,
		&s.EptId,
		&s.Salary,
	}
}

// View returns View object for that struct.
func (s *TbEmp1) View() reform.View {
	return TbEmp1View
}

// check interfaces
var (
	_ reform.View   = TbEmp1View
	_ reform.Struct = (*TbEmp1)(nil)
	_ fmt.Stringer  = (*TbEmp1)(nil)
)

func init() {
	parse.AssertUpToDate(&TbEmp1View.s, new(TbEmp1))
}
